#!/bin/bash

(
	nomFichier="git.rsa"
	debugVar --var="nomFichier" --value="$nomFichier"
	fichierSource="$HOME/Developpements/Resources/keys/$nomFichier"
	debugVar --var="fichierSource" --value="$fichierSource"
	fichierDestination="$HOME/.ssh/$nomFichier"
	debugVar --var="fichierDestination" --value="$fichierDestination"
	fichierSshConfig="$HOME/.ssh/config"
	debugVar --var="fichierSshConfig" --value="$fichierSshConfig"

	# Copie de la clé privée utilisée par git
	if [ ! -e "$fichierDestination" ] && [ -e "$fichierSource" ]; then
		cp -p "$fichierSource" "$fichierDestination"
		chmod 600 "$fichierDestination"
		echo "# Git Home Chris" >> "$fichierSshConfig"
		echo "Host git.home.chrismarty.fr" >> "$fichierSshConfig"
	    echo "  HostName home.chrismarty.fr" >> "$fichierSshConfig"
	    echo "  User git" >> "$fichierSshConfig"
	    echo "  IdentityFile $fichierDestination" >> "$fichierSshConfig"
	fi

	if [ ! -e "$fichierDestination" ]; then
		logError --text="Clé privée $fichierDestination introuvable"
		if [ ! -e "$fichierSource" ]; then
			logWarn --text="$fichierSource introuvable"
		fi
	fi


	# Configuration Git Systeme (/etc/gitconfig : commande sudo)

	# Enable colors in color-supporting terminals
	sudo git config --system color.ui auto
	# Alias
	sudo git config --system alias.co checkout
	sudo git config --system alias.br branch
	sudo git config --system alias.ci "commit -a"
	sudo git config --system alias.st status
	sudo git config --system alias.lg "log --graph --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ar)%Creset'"
	sudo git config --system alias.oops "commit --amend --no-edit"
	# Paginate output (less pagine, cat non)
	sudo git config --system core.pager less
	# Editeur de texte par défaut
	sudo git config --system core.editor vim
	# Don't consider trailing space change as a cause for merge conflicts
	sudo git config --system core.whitespace -trailing-space
	# Use better, descriptive initials (c: commit, i: index(staging), w: working directory) instead of a/b.
	sudo git config --system diff.mnemonicPrefix true
	# When using --word-diff, assume --word-diff-regex=. (affiche les différences au caractère près)
	sudo git config --system diff.wordRegex .
	# Auto-fetch submodule changes (sadly, won't auto-update)
	sudo git config --system fetch.recurseSubmodules on-demand
	# Display submodule rev change summaries in status
	sudo git config --system status.submoduleSummary true
	# Consider most regexes to be ERE
	sudo git config --system grep.extendedRegexp true
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	sudo git config --system log.abbrevCommit true
	# Display common-ancestor blocks in conflict hunks
	sudo git config --system merge.conflictStyle diff3
	# Clean up backup files created by merge tools on tool exit
	sudo git config --system mergetool.keepBackup false
	# Clean up temp files created by merge tools on tool exit
	sudo git config --system mergetool.keepTemporaries false
	# Auto-accept file prompts when launching merge tools
	sudo git config --system mergetool.prompt true
	# Default push should only push the current branch to its push target, regardless of its remote name
	sudo git config --system push.default upstream
	# Blue on black is hard to read in git branch -vv: use cyan instead
	sudo git config --system color.branch.upstream cyan
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sudo git config --system tag.sort version:refname
	# Recursively traverse untracked directories to display all contents
	sudo git config --system status.showUntrackedFiles all
	# Line ending => "true" (Checkout Windows-style, commit Unix-style), "input" (Checkout as-is, commit Unix-style), "false" (Checkout as-is, commit as-is)
	sudo git config --system core.autocrlf false

	# Show renames/moves as such
	# sudo git config --system diff.renames true
	# Display submodule-related information (commit listings)
	# sudo git config --system diff.submodule log
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	# sudo git config --system diff.followTags true

	# This is GREAT… when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# WARNING! This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	# sudo git config --system pull.rebase preserve

	# If you like rerere, uncomment these
	# sudo git config --system rerere.autoupdate true
	# sudo git config --system rerere.enabled true

	# Git Ignore global
	gitIgnore="/etc/gitignore"
	if [ ! -e "$gitIgnore" ]; then
		sudo touch "$gitIgnore"
	fi
	grep "# Ignore tmp repositories" $gitIgnore > /dev/null || echo "# Ignore tmp repositories" | sudo tee --append "$gitIgnore" > /dev/null
	grep "tmp/" $gitIgnore > /dev/null || echo "tmp/" | sudo tee --append "$gitIgnore" > /dev/null
	grep "# Ignore old files" $gitIgnore > /dev/null || echo -e "\n# Ignore old files" | sudo tee --append "$gitIgnore" > /dev/null
	grep "*.old" $gitIgnore > /dev/null || echo -e "*.old\n*.old/" | sudo tee --append "$gitIgnore" > /dev/null
	sudo git config --system core.excludesfile $gitIgnore

	
	# Configuration Git Globale (/$HOME/)

	# Gestion de l'utilisateur
	while [ -z $overridableGitNom ]; do
		read -p "Nom de l'utilisateur git : " overridableGitNom
	done

	while [ -z $overridableGitPrenom ]; do
		read -p "Prénom de l'utilisateur git : " overridableGitPrenom
	done

	while [ -z $overridableGitEmail ]; do
		read -p "Email de l'utilisateur git : " overridableGitEmail
	done

	# Configuration Git Globale (~/.gitconfig) -- ( ${#VAR} retourne la taille de VAR )
	if [ ${#overridableGitNom} -gt 0 ] && [ ${#overridableGitPrenom} -gt 0 ] && [ ${#overridableGitEmail} -gt 0 ]; then
		git config --global user.name "$overridableGitNom $overridableGitPrenom"
		git config --global user.email "$overridableGitEmail"
	fi
)